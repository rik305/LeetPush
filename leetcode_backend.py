from flask import Flask, request, jsonify, render_template_string
from flask_cors import CORS
import os
import json
import subprocess
import datetime
from pathlib import Path
import re

app = Flask(__name__)
CORS(app)  # Enable CORS for Chrome extension

# Configuration
SOLUTIONS_DIR = "leetcode_solutions"
SOLUTIONS_FILE = os.path.join(SOLUTIONS_DIR, "solutions.py")
HISTORY_FILE = os.path.join(SOLUTIONS_DIR, "solutions_history.json")

# Ensure solutions directory exists
os.makedirs(SOLUTIONS_DIR, exist_ok=True)

def init_solutions_file():
    """Initialize the solutions.py file if it doesn't exist"""
    if not os.path.exists(SOLUTIONS_FILE):
        with open(SOLUTIONS_FILE, 'w') as f:
            f.write("# LeetCode Solutions\n")
            f.write("# Auto-generated by LeetCode Solution Saver\n\n")
        print(f"Created solutions file: {SOLUTIONS_FILE}")

def get_solution_template(question_number, question_title, code, language="python"):
    """Generate solution template with proper formatting"""
    template = f"""
# Problem {question_number}: {question_title}
# URL: https://leetcode.com/problems/{question_title.lower().replace(' ', '-')}/
# Date: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

{code}

# End of solution for Problem {question_number}
{'='*50}
"""
    return template

def save_solution_to_file(question_number, question_title, code):
    """Save solution to the Python file"""
    try:
        # Read existing content
        if os.path.exists(SOLUTIONS_FILE):
            with open(SOLUTIONS_FILE, 'r') as f:
                content = f.read()
        else:
            content = "# LeetCode Solutions\n# Auto-generated by LeetCode Solution Saver\n\n"
        
        # Check if solution already exists
        if f"# Problem {question_number}:" in content:
            # Replace existing solution
            pattern = rf"# Problem {question_number}:.*?(?=# Problem \d+:|$)"
            new_solution = get_solution_template(question_number, question_title, code)
            content = re.sub(pattern, new_solution, content, flags=re.DOTALL)
        else:
            # Add new solution at the end
            content += get_solution_template(question_number, question_title, code)
        
        # Write back to file
        with open(SOLUTIONS_FILE, 'w') as f:
            f.write(content)
        
        return True
    except Exception as e:
        print(f"Error saving solution to file: {e}")
        return False

def save_to_history(solution_data):
    """Save solution metadata to history file"""
    try:
        history = []
        if os.path.exists(HISTORY_FILE):
            with open(HISTORY_FILE, 'r') as f:
                history = json.load(f)
        
        # Add new solution
        history.append({
            'question_number': solution_data['questionNumber'],
            'question_title': solution_data['questionTitle'],
            'question_slug': solution_data['questionSlug'],
            'timestamp': solution_data['timestamp'],
            'url': solution_data['url']
        })
        
        # Save back to file
        with open(HISTORY_FILE, 'w') as f:
            json.dump(history, f, indent=2)
        
        return True
    except Exception as e:
        print(f"Error saving to history: {e}")
        return False

def git_operations():
    """Perform Git operations (add, commit, push)"""
    try:
        # Change to the solutions directory
        os.chdir(SOLUTIONS_DIR)
        
        # Add all files
        subprocess.run(['git', 'add', '.'], check=True)
        
        # Commit with timestamp
        commit_message = f"Add LeetCode solution - {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        subprocess.run(['git', 'commit', '-m', commit_message], check=True)
        
        # Push to remote (assuming origin is set up)
        subprocess.run(['git', 'push', 'origin', 'main'], check=True)
        
        print("Git operations completed successfully")
        return True
    except subprocess.CalledProcessError as e:
        print(f"Git operation failed: {e}")
        return False
    except Exception as e:
        print(f"Error in git operations: {e}")
        return False

@app.route('/', methods=['GET'])
def root():
    """Root endpoint"""
    return jsonify({'status': 'running', 'message': 'LeetCode Solution Saver Backend is running'})

@app.route('/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'message': 'LeetCode Solution Saver backend is running'
    })

@app.route('/save-solution', methods=['POST'])
def save_solution():
    """Save a completed LeetCode solution"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({'success': False, 'error': 'No data provided'}), 400
        
        required_fields = ['questionNumber', 'questionTitle', 'code']
        for field in required_fields:
            if field not in data:
                return jsonify({'success': False, 'error': f'Missing required field: {field}'}), 400
        
        # Save solution to file
        if not save_solution_to_file(data['questionNumber'], data['questionTitle'], data['code']):
            return jsonify({'success': False, 'error': 'Failed to save solution to file'}), 500
        
        # Save to history
        if not save_to_history(data):
            return jsonify({'success': False, 'error': 'Failed to save to history'}), 500
        
        # Perform Git operations
        git_success = git_operations()
        
        return jsonify({
            'success': True,
            'message': f'Solution for Problem {data["questionNumber"]} saved successfully',
            'git_success': git_success
        })
        
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/solutions', methods=['GET'])
def view_solutions():
    """View all saved solutions"""
    try:
        if not os.path.exists(SOLUTIONS_FILE):
            return jsonify({'success': False, 'error': 'No solutions file found'}), 404
        
        with open(SOLUTIONS_FILE, 'r') as f:
            content = f.read()
        
        # Return as HTML for better viewing
        html_template = """
        <!DOCTYPE html>
        <html>
        <head>
            <title>LeetCode Solutions</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                pre { background-color: #f4f4f4; padding: 15px; border-radius: 5px; overflow-x: auto; }
                .header { background-color: #007bff; color: white; padding: 20px; border-radius: 5px; }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>LeetCode Solutions</h1>
                <p>Auto-generated by LeetCode Solution Saver</p>
            </div>
            <pre><code>{{ content }}</code></pre>
        </body>
        </html>
        """
        
        return render_template_string(html_template, content=content)
        
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/stats', methods=['GET'])
def get_stats():
    """Get statistics about saved solutions"""
    try:
        today_count = 0
        total_count = 0
        
        if os.path.exists(HISTORY_FILE):
            with open(HISTORY_FILE, 'r') as f:
                history = json.load(f)
            
            total_count = len(history)
            
            # Count solutions from today
            today = datetime.datetime.now().date()
            for solution in history:
                solution_date = datetime.datetime.fromisoformat(solution['timestamp'].replace('Z', '+00:00')).date()
                if solution_date == today:
                    today_count += 1
        
        return jsonify({
            'success': True,
            'today_count': today_count,
            'total_count': total_count
        })
        
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

if __name__ == '__main__':
    init_solutions_file()
    print("LeetCode Solution Saver Backend")
    print("Starting server on http://localhost:9999")
    print(f"Solutions will be saved to: {SOLUTIONS_FILE}")
    app.run(debug=True, host='0.0.0.0', port=9999)
